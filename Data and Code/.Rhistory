mutate(check_total=if_else(sep_check_day =="2", check_total+1, check_total)) %>%
mutate(check_total=if_else(sep_check_struc=="2",check_total+1, check_total)) %>%
mutate(check_total=if_else(sep_check_freq=="1",check_total+1, check_total)) %>%
mutate(check_total=if_else(one_check_know =="1", check_total+1, check_total)) %>%
mutate(check_total=if_else(one_check_office =="1", check_total+1, check_total)) %>%
mutate(check_total=if_else(one_check_day =="1", check_total+1, check_total)) %>%
mutate(check_total=if_else(one_check_struc =="2",check_total+1, check_total)) %>%
mutate(check_total=if_else(one_check_freq =="1", check_total+1, check_total))
#Apply and set filter
df.exp3<-df.exp3 %>%
filter(check_total >=5) #Set to 10 to change exlusion criterion to "all check questions correct"
###Experiment 3
#####Demographics
df.exp3_demo <- df.exp3 %>%
select(age, gender, duration) %>%
mutate(age=as.numeric(age))%>%
mutate(duration=as.numeric(duration)) %>%
transform(gender= ifelse(gender==1, "Male", #recode numbers into gender categories
ifelse(gender==2, "Female",
ifelse(gender==3, "Prefer not to say", gender)))) %>%
filter(age<100 |age ==" ") %>% #remove outliers (year) or N.A.s
summarize(n=n(),
female=sum(gender=="Female"),
not_say=sum(gender=="Prefer not to say"),
mean_age = mean(age),
std_age=sd(age),
mean_time=mean(duration/60),
sd_time=sd(duration/60)
)
###Experiment 3
###create data frame in long format with causal and expectation responses
df.exp3_long = df.exp3 %>%
select(scenario,
scenario_order,
participant,
check_total,
contains("expect"),
contains("cause")) %>%
gather(condition, rating, "one_expectation_a1":"sep_cause_a2") %>%
mutate(type=ifelse(str_detect(condition, "expectation"), "expect_rating",
ifelse(str_detect(condition, "cause"), "cause_rating", "")))%>%
mutate(knowledge = ifelse(str_detect(condition, "one"),
"Knowledge", "No Knowledge")) %>%
mutate(agent = ifelse(str_detect(condition, "_a1"),
"Normal Agent", "Abnormal Agent")) %>%
mutate(rating=as.numeric(rating)) %>%
select(-condition) %>%
spread(type, rating)
E3_m1 <- lmer(expect_rating ~ agent +(1|participant), df.exp3_long, REML=F)
E3_m2 <- lmer(expect_rating ~ knowledge +(1|participant), df.exp3_long, REML=F)
E3_m3 <- lmer(expect_rating ~ agent + knowledge +(1|participant), df.exp3_long, REML=F)
E3_m4 <- lmer(expect_rating ~ agent*knowledge +(1|participant), df.exp3_long, REML=F)
E3_m5 <- lmer(expect_rating ~ agent*knowledge*scenario +(1|participant), df.exp3_long, REML=F)
anova(E3_m2,E3_m3)
anova(E3_m1,E3_m3)
anova(E3_m3,E3_m4)
r.squaredGLMM(E3_m3)[2] - r.squaredGLMM(E3_m2)[2]
r.squaredGLMM(E3_m3)[2] - r.squaredGLMM(E3_m1)[2]
E3_t3 <- lmer(expect_rating ~ (1|participant), data=df.exp3_long[df.exp3_long$knowledge=="Knowledge",], REML=F)
E3_t4 <- lmer(expect_rating ~ agent + (1|participant), df.exp3_long[df.exp3_long$knowledge=="Knowledge",], REML=F)
anova(E3_t3,E3_t4)
E3_t5 <- lmer(expect_rating ~ (1|participant), data=df.exp3_long[df.exp3_long$knowledge=="No Knowledge",], REML=F)
E3_t6 <- lmer(expect_rating ~ agent + (1|participant), df.exp3_long[df.exp3_long$knowledge=="No Knowledge",], REML=F)
anova(E3_t5,E3_t6)
C3_m1 <- lmer(cause_rating ~ agent +(1|participant), df.exp3_long, REML=F)
C3_m2 <- lmer(cause_rating ~ knowledge +(1|participant), df.exp3_long, REML=F)
C3_m3 <- lmer(cause_rating ~ agent + knowledge +(1|participant), df.exp3_long, REML=F)
C3_m4 <- lmer(cause_rating ~ agent*knowledge +(1|participant), df.exp3_long, REML=F)
C3_m5 <- lmer(cause_rating ~ knowledge*agent*scenario +(1|participant), df.exp3_long, REML=F)
anova(C3_m2,C3_m3)
anova(C3_m1,C3_m3)
library("bnlearn")
library("Rgraphviz")
library("bnviewer")
dag = model2network("[NormalityA][NormalityB][AexpectsB|NormalityB][BexpectsA|NormalityA][MentalStateA][MentalStateB][ActionA|NormalityA:AexpectsB:MentalStateA][ActionB|NormalityB:BexpectsA:MentalStateB][Outcome|ActionA:ActionB]")
###Variables
NormalityA.lv = c("F", "T")
NormalityB.lv = c("F", "T")
AexpectsB.lv = c("F", "T")
BexpectsA.lv = c("F", "T")
MentalStateA.lv = c("F", "T")
MentalStateB.lv = c("F", "T")
ActionA.lv = c("F", "T")
ActionB.lv = c("F", "T")
Outcome.lv = c("F", "T")
###Conditional Probablities
NormalityA.prob = array(c(0.2, 0.8), dim = 2, dimnames = list(NormalityA = NormalityA.lv))
NormalityB.prob = array(c(0.2, 0.8), dim = 2, dimnames = list(NormalityB = NormalityB.lv))
AexpectsB.prob = array(c(0.9, 0.1, 0.1, 0.9), dim = c(2,2), dimnames = list(AexpectsB = AexpectsB.lv, NormalityB= NormalityB.lv))
BexpectsA.prob = array(c(0.9, 0.1, 0.1, 0.9), dim = c(2,2), dimnames = list(BexpectsA = BexpectsA.lv, NormalityA= NormalityA.lv))
MentalStateA.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(MentalStateA = MentalStateA.lv))
MentalStateB.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(MentalStateB = MentalStateB.lv))
ActionA.prob = array(c(0.8, 0.2, 0.9,0.1, 0.8, 0.2,0.1,0.9,0.2,0.8,0.9,0.1, 0.2, 0.8, 0.1,0.9), dim = c(2, 2, 2, 2), dimnames = list(ActionA=ActionA.lv, AexpectsB = AexpectsB.lv, MentalStateA = MentalStateA.lv, NormalityA = NormalityA.lv))
ActionB.prob = array(c(0.8, 0.2, 0.9,0.1, 0.8, 0.2,0.1,0.9,0.2,0.8,0.9,0.1, 0.2, 0.8, 0.1,0.9), dim = c(2, 2, 2, 2), dimnames = list(ActionB=ActionB.lv, BexpectsA = BexpectsA.lv, MentalStateB = MentalStateB.lv, NormalityB = NormalityB.lv))
Outcome.prob = array(c(1, 0, 1, 0, 1, 0, 0, 1), dim = c(2,2, 2), dimnames = list(Outcome = Outcome.lv, ActionA=ActionA.lv, ActionB=ActionB.lv))
cpt = list(NormalityA = NormalityA.prob,
NormalityB = NormalityB.prob,
AexpectsB = AexpectsB.prob,
BexpectsA = BexpectsA.prob,
MentalStateA=MentalStateA.prob,
MentalStateB=MentalStateB.prob,
ActionA=ActionA.prob,
ActionB=ActionB.prob,
Outcome=Outcome.prob)
###set up model
survey = custom.fit(dag, cpt)
M_Abnormal<-cpquery(survey, event = (MentalStateB == "T"), evidence = (NormalityA == "T") &
(NormalityB == "F") & (ActionA == "T") &(ActionB == "T") &(Outcome == "T"), n=10000000 )
M_Normal<-cpquery(survey, event = (MentalStateA == "T"), evidence = (NormalityA == "T") &
(NormalityB == "F") & (ActionA == "T") & (ActionB == "T") , n=10000000 )
##### Epistemic State for Abnormal Agent
## epistemic  state true
E_Abnormal<-cpquery(survey, event = (BexpectsA == "T"), evidence = (NormalityA == "T") &
(NormalityB == "F") & (ActionA == "T") & (ActionB == "T") &(Outcome == "T"), n=10000000 )
#### Epistemic State for Normal Agent
## epistemic  state true
E_Normal<-cpquery(survey, event = (AexpectsB == "T"), evidence = (NormalityA == "T") &
(NormalityB == "F") & (ActionA == "T") & (ActionB == "T") , n=10000000 )
df.Knowledge<-data.frame(Prediction=c(M_Abnormal, M_Normal, E_Abnormal, E_Normal), Condition=c("Abnormal Agent", "Normal Agent", "Abnormal Agent", "Normal Agent"), InferenceType=c("Mental State", "Mental State", "Expectation about other agent", "Expectation about other agent")) %>%
mutate(Prediction = round(Prediction, digits=2)) %>%
mutate(Knowledge = "Knowledge")
myTheme <-   theme(plot.title=element_text(size=18,
face="bold",
hjust=0.5,
lineheight=1.2),
axis.title.x  = element_blank(),
axis.title.y = element_text(color="black", size = 18, vjust=.9),
axis.text.x = element_text(color="black", size = 16),
axis.text.y = element_text(color="black", size = 18),
strip.text.x = element_text(color="black", size = 16),
legend.text = element_text(color="black", size = 18),
legend.title = element_text(color="black", size = 18),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill="white"))
#set colour palette
ecPalette<-c("gray13", "khaki4")
#create plot
FigXa <-df.Knowledge %>%
mutate(Condition =factor(Condition,levels=c( "Normal Agent", "Abnormal Agent"))) %>%
ggplot(aes(x=factor(Condition), Prediction, fill=Condition)) +
geom_bar(stat="identity", position = "dodge", colour = "black", alpha=0.6)+
coord_cartesian(ylim = c(0,1.1)) +
geom_text(aes(label=scales::percent(Prediction, accuracy = 1)),  vjust=-0.6, color="black", size=6)+
labs( y="Probablity")+
scale_y_continuous(labels =scales::percent_format(accuracy = 1), breaks = seq(0, 1, by=0.25))+
scale_fill_manual(values = ePalette)+
facet_grid(~InferenceType)+
theme_bw()+
myTheme+
theme(legend.position= "none")+
labs(title="Knowledge")
###show plot
plot(FigXa)
# Version `No Knowledge'
#Graph Structure
dag2 = model2network("[NormalityA][NormalityB][AexpectsB][BexpectsA][MentalStateA][MentalStateB][ActionA|NormalityA:AexpectsB:MentalStateA][ActionB|NormalityB:BexpectsA:MentalStateB][Outcome|ActionA:ActionB]")
#Variables
NormalityA.lv = c("F", "T")
NormalityB.lv = c("F", "T")
AexpectsB.lv = c("F", "T")
BexpectsA.lv = c("F", "T")
MentalStateA.lv = c("F", "T")
MentalStateB.lv = c("F", "T")
ActionA.lv = c("F", "T")
ActionB.lv = c("F", "T")
Outcome.lv = c("F", "T")
#Conditional  probabilities
NormalityA.prob = array(c(0.2, 0.8), dim = 2, dimnames = list(NormalityA = NormalityA.lv))
NormalityB.prob = array(c(0.2, 0.8), dim = 2, dimnames = list(NormalityB = NormalityB.lv))
AexpectsB.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(AexpectsB = AexpectsB.lv)) #### independent node
BexpectsA.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(BexpectsA = BexpectsA.lv)) #### independent node
MentalStateA.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(MentalStateA = MentalStateA.lv))
MentalStateB.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(MentalStateB = MentalStateB.lv))
ActionA.prob = array(c(0.8, 0.2, 0.9,0.1, 0.8, 0.2,0.1,0.9,0.2,0.8,0.9,0.1, 0.2, 0.8, 0.1,0.9), dim = c(2, 2, 2, 2), dimnames = list(ActionA=ActionA.lv, AexpectsB = AexpectsB.lv, MentalStateA = MentalStateA.lv, NormalityA = NormalityA.lv))
ActionB.prob = array(c(0.8, 0.2, 0.9,0.1, 0.8, 0.2,0.1,0.9,0.2,0.8,0.9,0.1, 0.2, 0.8, 0.1,0.9), dim = c(2, 2, 2, 2), dimnames = list(ActionB=ActionB.lv, BexpectsA = BexpectsA.lv, MentalStateB = MentalStateB.lv, NormalityB = NormalityB.lv))
Outcome.prob = array(c(1, 0, 1, 0, 1, 0, 0, 1), dim = c(2,2, 2), dimnames = list(Outcome = Outcome.lv, ActionA=ActionA.lv, ActionB=ActionB.lv))
cpt2 = list(NormalityA = NormalityA.prob,
NormalityB = NormalityB.prob,
AexpectsB = AexpectsB.prob,
BexpectsA = BexpectsA.prob,
MentalStateA=MentalStateA.prob,
MentalStateB=MentalStateB.prob,
ActionA=ActionA.prob,
ActionB=ActionB.prob,
Outcome=Outcome.prob)
#Set up model
survey2 = custom.fit(dag2, cpt2)
# plot model
graphviz.plot(dag2,shape = "ellipse")
graphviz.plot(dag2)
graphviz.plot(dag)
# Version `No Knowledge'
#Graph Structure
dag2 = model2network("[NormalityA][NormalityB][AexpectsB][BexpectsA][MentalStateA][MentalStateB][ActionA|NormalityA:AexpectsB:MentalStateA][ActionB|NormalityB:BexpectsA:MentalStateB][Outcome|ActionA:ActionB]")
#Variables
NormalityA.lv = c("F", "T")
NormalityB.lv = c("F", "T")
AexpectsB.lv = c("F", "T")
BexpectsA.lv = c("F", "T")
MentalStateA.lv = c("F", "T")
MentalStateB.lv = c("F", "T")
ActionA.lv = c("F", "T")
ActionB.lv = c("F", "T")
Outcome.lv = c("F", "T")
#Conditional  probabilities
NormalityA.prob = array(c(0.2, 0.8), dim = 2, dimnames = list(NormalityA = NormalityA.lv))
NormalityB.prob = array(c(0.2, 0.8), dim = 2, dimnames = list(NormalityB = NormalityB.lv))
AexpectsB.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(AexpectsB = AexpectsB.lv)) #### independent node
BexpectsA.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(BexpectsA = BexpectsA.lv)) #### independent node
MentalStateA.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(MentalStateA = MentalStateA.lv))
MentalStateB.prob = array(c(0.9, 0.1), dim = 2, dimnames = list(MentalStateB = MentalStateB.lv))
ActionA.prob = array(c(0.8, 0.2, 0.9,0.1, 0.8, 0.2,0.1,0.9,0.2,0.8,0.9,0.1, 0.2, 0.8, 0.1,0.9), dim = c(2, 2, 2, 2), dimnames = list(ActionA=ActionA.lv, AexpectsB = AexpectsB.lv, MentalStateA = MentalStateA.lv, NormalityA = NormalityA.lv))
ActionB.prob = array(c(0.8, 0.2, 0.9,0.1, 0.8, 0.2,0.1,0.9,0.2,0.8,0.9,0.1, 0.2, 0.8, 0.1,0.9), dim = c(2, 2, 2, 2), dimnames = list(ActionB=ActionB.lv, BexpectsA = BexpectsA.lv, MentalStateB = MentalStateB.lv, NormalityB = NormalityB.lv))
Outcome.prob = array(c(1, 0, 1, 0, 1, 0, 0, 1), dim = c(2,2, 2), dimnames = list(Outcome = Outcome.lv, ActionA=ActionA.lv, ActionB=ActionB.lv))
cpt2 = list(NormalityA = NormalityA.prob,
NormalityB = NormalityB.prob,
AexpectsB = AexpectsB.prob,
BexpectsA = BexpectsA.prob,
MentalStateA=MentalStateA.prob,
MentalStateB=MentalStateB.prob,
ActionA=ActionA.prob,
ActionB=ActionB.prob,
Outcome=Outcome.prob)
#Set up model
survey2 = custom.fit(dag2, cpt2)
# plot model
graphviz.plot(dag2)
#############Mental State
##### Mental State for Abnormal Agent
## mental state true
M_Abnormal2<-cpquery(survey2, event = (MentalStateB == "T"), evidence = (NormalityA == "T") &
(NormalityB == "F") & (ActionA == "T") &(ActionB == "T") &(Outcome == "T"), n=10000000 )
#### Mental State for Normal Agent
## mental state true
M_Normal2<-cpquery(survey2, event = (MentalStateA == "T"), evidence = (NormalityA == "T") &
(NormalityB == "F") & (ActionA == "T") & (ActionB == "T") , n=10000000 )
df.NoKnowledge<-data.frame(Prediction=c(M_Abnormal2, M_Normal2, E_Abnormal2, E_Normal2), Condition=c("Abnormal Agent", "Normal Agent", "Abnormal Agent", "Normal Agent"), InferenceType=c("Mental State", "Mental State", "Expectation about other agent", "Expectation about other agent")) %>%
mutate(Prediction = round(Prediction, digits=2)) %>%
mutate(Knowledge="No Knowledge")
##### Epistemic State for Abnormal Agent
## epistemic  state true
E_Abnormal2<-cpquery(survey2, event = (BexpectsA == "T"), evidence = (NormalityA == "T") &
(NormalityB == "F") & (ActionA == "T") & (ActionB == "T") &(Outcome == "T"), n=10000000 )
#### Epistemic State for Normal Agent
## epistemic  state true
E_Normal2<-cpquery(survey2, event = (AexpectsB == "T"), evidence = (NormalityA == "T") &
(NormalityB == "F") & (ActionA == "T") & (ActionB == "T") , n=10000000 )
df.NoKnowledge<-data.frame(Prediction=c(M_Abnormal2, M_Normal2, E_Abnormal2, E_Normal2), Condition=c("Abnormal Agent", "Normal Agent", "Abnormal Agent", "Normal Agent"), InferenceType=c("Mental State", "Mental State", "Expectation about other agent", "Expectation about other agent")) %>%
mutate(Prediction = round(Prediction, digits=2)) %>%
mutate(Knowledge="No Knowledge")
####Set theme
myTheme <-   theme(plot.title=element_text(size=18,
face="bold",
hjust=0.5,
lineheight=1.2),
axis.title.x  = element_blank(),
axis.title.y = element_text(color="black", size = 18, vjust=.9),
axis.text.x = element_text(color="black", size = 16),
axis.text.y = element_text(color="black", size = 18),
strip.text.x = element_text(color="black", size = 16),
legend.text = element_text(color="black", size = 18),
legend.title = element_text(color="black", size = 18),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill="white"))
#set colour palette
ePalette<- c("#969696", "#f7f7f7")
#create plot
FigXb <- df.NoKnowledge %>%
mutate(Condition =factor(Condition,levels=c( "Normal Agent", "Abnormal Agent"))) %>%
ggplot(aes(x=factor(Condition), Prediction, fill=Condition)) +
geom_bar(stat="identity", position = "dodge", colour = "black", alpha=0.6)+
coord_cartesian(ylim = c(0,1.1)) +
geom_text(aes(label=scales::percent(Prediction, accuracy = 1)),  vjust=-0.6, color="black", size=6)+
labs( y="Probablity")+
scale_y_continuous(labels =scales::percent_format(accuracy = 1), breaks = seq(0, 1, by=0.25))+
scale_fill_manual(values = ePalette)+
facet_grid(~InferenceType)+
theme_bw()+
myTheme+
theme(legend.position= "none")+
labs(title="No Knowledge")
###show plot
plot(FigXb)
#create plot
FigX <- ggarrange(FigXa, FigXb,
ncol = 1,
nrow = 2)
#show plot
plot(FigX)
#save plot
ggsave(FigX, file="FigX.pdf", dpi=400, height = 8, width = 8)
df.data4 = read.csv(file = "Exp_4.csv", stringsAsFactors = F, sep = ",") %>%
filter(row_number() > 2) %>% # additional rows in qualtrics csv
clean_names() %>%
filter(!distribution_channel == "preview", #exclude preview trials,
!age==" ", #exclude bot fails,
progress  >= 99 ) #exclude people who did not complete the survey
df.exp4 = df.data4 %>%
mutate(participant = 1:n()) %>%
rename(order = question_order)%>%
rename(duration=duration_in_seconds) %>%
select(c_know_micro_office:c_no_coffee_freq_2,
participant,
order,
condition,
duration,
age,
gender,
-starts_with("q")) %>%
gather("index", "value", -c(participant, condition, order))%>%
filter(value != "") %>%
arrange(index)%>%
mutate(index = ifelse(str_detect(index, "know_micro_office|know_coffee_office"),
"know_check_office",
index))%>%
mutate(index = ifelse(str_detect(index, "know_micro_know|know_coffee_know"),
"know_check_know",
index))%>%
mutate(index = ifelse(str_detect(index, "know_micro_day|know_coffee_day"),
"know_check_day",
index))%>%
mutate(index = ifelse(str_detect(index, "know_micro_struc|know_coffee_struc"),
"know_check_struc",
index))%>%
mutate(index = ifelse(str_detect(index, "know_micro_freq_1|know_coffee_freq_1"),
"know_check_freq_1",
index))%>%
mutate(index = ifelse(str_detect(index, "know_micro_freq_2|know_coffee_freq_2"),
"know_check_freq_2",
index))%>%
mutate(index = ifelse(str_detect(index, "no_micro_office|no_coffee_office"),
"no_check_office",
index))%>%
mutate(index = ifelse(str_detect(index, "no_micro_know|no_coffee_know"),
"no_check_know",
index))%>%
mutate(index = ifelse(str_detect(index, "no_micro_day|no_coffee_day"),
"no_check_day",
index))%>%
mutate(index = ifelse(str_detect(index, "no_micro_struc|no_coffee_struc"),
"no_check_struc",
index))%>%
mutate(index = ifelse(str_detect(index, "no_micro_freq_1|no_coffee_freq_1"),
"no_check_freq_1",
index))%>%
mutate(index = ifelse(str_detect(index, "no_micro_freq_2|no_coffee_freq_2"),
"no_check_freq_2",
index))%>%
mutate(index = ifelse(str_detect(index, "know_exp_a1"),
"know_expectation_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "know_exp_a2"),
"know_expectation_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a1_7"),
"know_expect_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a2_7"),
"know_expect_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a1_8"),
"know_not_mind_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a2_8"),
"know_not_mind_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a1_6"),
"know_like_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a2_6"),
"know_like_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a1_1"),
"know_desire_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a2_1"),
"know_desire_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a1_4"),
"know_intend_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "know_ep_a2_4"),
"know_intend_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "no_exp_a1"),
"no_expectation_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "no_exp_a2"),
"no_expectation_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a1_7"),
"no_expect_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a2_7"),
"no_expect_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a1_8"),
"no_not_mind_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a2_8"),
"no_not_mind_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a1_6"),
"no_like_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a2_6"),
"no_like_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a1_1"),
"no_desire_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a2_1"),
"no_desire_a2",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a1_4"),
"no_intend_a1",
index))%>%
mutate(index = ifelse(str_detect(index, "no_ep_a2_4"),
"no_intend_a2",
index))%>%
mutate(order = ifelse(order == 1,"agent 1 first",
ifelse(order == 2, "agent 2 first", " ")))%>%
mutate(scenario = ifelse((condition == 1| condition== 2), "Microwave", "Coffee"))%>%
mutate(scenario_order = ifelse((condition == 1| condition== 3), "Both first", "One first"))%>%
spread(index, value) %>%
arrange(participant)
###Experiment 4
#### Filter Setting
#create filter
df.exp4<- df.exp4  %>%
mutate(no_check_freq=paste(no_check_freq_1, no_check_freq_2, sep=",")) %>%
mutate(know_check_freq=paste(know_check_freq_1, know_check_freq_2, sep=",")) %>%
select (-c(no_check_freq_1, no_check_freq_2, know_check_freq_1, know_check_freq_2)) %>%
mutate(check_total=if_else(no_check_know=="2", 1, 0)) %>%
mutate(check_total=if_else(no_check_office =="2", check_total+1, check_total)) %>%
mutate(check_total=if_else(no_check_day =="2", check_total+1, check_total)) %>%
mutate(check_total=if_else(no_check_struc=="2",check_total+1, check_total)) %>%
mutate(check_total=if_else(no_check_freq=="1,NA",check_total+1, check_total)) %>%
mutate(check_total=if_else(know_check_know =="1", check_total+1, check_total)) %>%
mutate(check_total=if_else(know_check_office =="1", check_total+1, check_total)) %>%
mutate(check_total=if_else(know_check_day =="1", check_total+1, check_total)) %>%
mutate(check_total=if_else(know_check_struc =="2",check_total+1, check_total)) %>%
mutate(check_total=if_else(know_check_freq =="1,NA", check_total+1, check_total))
#set and apply filter
df.exp4<-df.exp4 %>%
filter(check_total >=5)
###Experiment 4
#####Demographics
df.exp4_demo <- df.exp4 %>%
select(age, gender, duration) %>%
mutate(age=as.numeric(age))%>%
mutate(duration=as.numeric(duration)) %>%
transform(gender= ifelse(gender==1, "Male", #recode numbers into gender categories
ifelse(gender==2, "Female",
ifelse(gender==3, "Prefer not to say", gender)))) %>%
filter(age<100 |age ==" ") %>% #remove outliers (year) or N.A.s
summarize(n=n(),
female=sum(gender=="Female"),
not_say=sum(gender=="Prefer not to say"),
mean_age = mean(age),
std_age=sd(age),
mean_time=mean(duration/60),
median_time=median(duration/60),
sd_time=sd(duration/60)
)
###Experiment 4
###create data frame in long format with causal and expectation responses
df.exp4_long = df.exp4 %>%
select(scenario,
scenario_order,
participant,
check_total,
contains("know"),
contains("no"),
-c(contains("check"))) %>%
gather(condition, rating, "know_desire_a1":"no_not_mind_a2") %>%
mutate(type=ifelse(str_detect(condition, "expectation"), "exp_other",
ifelse(str_detect(condition, "expect"), "exp_outcome",
ifelse(str_detect(condition, "not_mind"), "indifferent",
ifelse(str_detect(condition, "like"), "like",
ifelse(str_detect(condition, "desire"), "desire", "intend"
)))))) %>%
mutate(knowledge = ifelse(str_detect(condition, "know"),
"Knowledge", "No Knowledge")) %>%
mutate(agent = ifelse(str_detect(condition, "_a1"),
"Normal Agent", "Abnormal Agent")) %>%
mutate(rating=as.numeric(rating)) %>%
select(-condition) %>%
spread(type, rating) %>%
mutate(mental_state= (indifferent+like+desire+intend)/4) #aggregate mental states
E4_m1 <- lmer(exp_other ~ agent +(1|participant), df.exp4_long, REML=F)
E4_m2 <- lmer(exp_other ~ knowledge +(1|participant), df.exp4_long, REML=F)
E4_m3 <- lmer(exp_other ~ agent + knowledge +(1|participant), df.exp4_long, REML=F)
E4_m4 <- lmer(exp_other ~ agent*knowledge +(1|participant), df.exp4_long, REML=F)
E4_m5 <- lmer(exp_other ~ knowledge*agent*scenario +(1|participant), df.exp4_long, REML=F)
anova(E4_m2,E4_m3)
r.squaredGLMM(E4_m3)[1] - r.squaredGLMM(E4_m2)[1]
anova(E4_m1,E4_m3)
anova(E4_m3,E4_m4)
anova(E4_m4,E4_m5)
Ex4_m1 <- lmer(exp_outcome ~ agent +(1|participant), df.exp4_long, REML=F)
Ex4_m2 <- lmer(exp_outcome ~ knowledge +(1|participant), df.exp4_long, REML=F)
Ex4_m3 <- lmer(exp_outcome ~ agent + knowledge +(1|participant), df.exp4_long, REML=F)
Ex4_m4 <- lmer(exp_outcome ~ agent*knowledge +(1|participant), df.exp4_long, REML=F)
Ex4_m5 <- lmer(exp_outcome ~ knowledge*agent*scenario +(1|participant), df.exp4_long, REML=F)
anova(Ex4_m1,Ex4_m3)
pwr.f2.test(u = 2, v = 130 - 2 - 1, f2 = .07/(1 - .07), sig.level = 0.05)
pwr.f2.test(u = 2, v = 130 - 2 - 1, f2 = 0.12/(1 - 0.12), sig.level = 0.05)
